1. Selezionare tutti gli studenti iscritti al Corso di Laurea in Economia

SELECT students.name, students.surname, degrees.name AS 'Nome Corso'
FROM students
INNER JOIN degrees
ON students.degree_id = degrees.id
WHERE degree_id = 53 

2. Selezionare tutti i Corsi di Laurea Magistrale del Dipartimento di
Neuroscienze

SELECT degrees.name AS "Nome Corso", departments.name AS "Dipartimento"
FROM degrees
INNER JOIN departments
ON degrees.department_id = departments.id
WHERE departments.id = 7
AND level = "magistrale";

3. Selezionare tutti i corsi in cui insegna Fulvio Amato (id=44)

SELECT teachers.name, teachers.surname, courses.name AS nome_corso
FROM teachers
INNER JOIN course_teacher
ON teacher_id = teachers.id
INNER JOIN courses
ON teacher_id = courses.id

WHERE teachers.id = 44;

4. Selezionare tutti gli studenti con i dati relativi al corso di laurea a cui sono iscritti e il relativo dipartimento, in ordine alfabetico per cognome e nome

SELECT students.name AS "Nome Studente", students.surname AS "Cognome Studente", degrees.name AS "Nome Corso", departments.name AS "Nome Dipartimento"
FROM students
INNER JOIN degrees
ON students.degree_id = degrees.id
INNER JOIN departments
ON departments.id = degrees.department_id
ORDER BY students.name ASC;

5. Selezionare tutti i corsi di laurea con i relativi corsi e insegnanti

SELECT degrees.name, courses.name, teachers.name, teachers.surname
FROM degrees
INNER JOIN courses
ON degrees.id = courses.degree_id
INNER JOIN course_teacher
ON courses.id = course_teacher.course_id
INNER JOIN teachers
ON teachers.id = course_teacher.teacher_id;

6. Selezionare tutti i docenti che insegnano nel Dipartimento di
Matematica (54)


SELECT DISTINCT teachers.name, teachers.surname, departments.name
FROM teachers

INNER JOIN course_teacher
ON teachers.id = course_teacher.teacher_id

INNER JOIN courses
ON course_teacher.course_id = courses.id 

INNER JOIN degrees
ON courses.degree_id = degrees.id 

INNER JOIN departments
ON degrees.department_id = departments.id 

WHERE departments.id = 5  

7. BONUS: Selezionare per ogni studente il numero di tentativi sostenuti
per ogni esame, stampando anche il voto massimo. Successivamente,
filtrare i tentativi con voto minimo 18.

SELECT students.name, students.surname, COUNT(`exams.id`)
SELECT registration_number, students.name, students.surname, COUNT(exams.id), exam_student.vote, MAX(exam_student.vote), exam_student.student_id
FROM students
INNER JOIN exam_student
ON students.id = exam_student.student_id
INNER JOIN exams
ON exam_student.exam_id = exams.id
WHERE exam_student.vote >= 18
GROUP BY exam_student.student_id;